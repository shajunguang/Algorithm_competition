
#include<bits/stdc++.h>
#define local
using namespace std;
const int MAXN=100005,sp_num=1000000007;

struct NODE{
    int w;
    int e;
    int next; //next[i]表示与第i条边同起点的上一条边的储存位置
}edge[MAXN];
int cnt;
int head[MAXN],vis[MAXN];
void add(int u,int v,int w){
    edge[cnt].w=w;
    edge[cnt].e=v;    //edge[i]表示第i条边的终点
    edge[cnt].next=head[u]; //head[i]表示以i为起点的最后一条边的储存位置
    head[u]=cnt++;
}

int flag=1,we=0;
bool dfs(int u,int v)
{
    vis[u]=1;
    for(int i=head[u];i!=-1;i=edge[i].next)
    {
        if(edge[i].e==v)
        {
            we=max(we,edge[i].w);
            return true;
        }
    }
    for(int i=head[u];i!=-1;i=edge[i].next)
        if(!vis[edge[i].e])
        {
            int before=we;
            vis[edge[i].e]=1;
            we=max(we,edge[i].w);
            if(dfs(edge[i].e,v)) return true;
            if(flag){
                we=before;
                vis[edge[i].e]=0;
            }
        }
    return false;
}

int main() {
#ifdef local
    freopen("in.txt","r",stdin);
#endif
    memset(head, -1, sizeof(head));
    //memset(vis,0,sizeof vis);
    cnt = 0;
    int n;
    cin >> n;
    int a, b, c;
    for(int i=0;i<n;i++) {
        cin >> a >> b >> c;
        add(a, b, c);
        add(b, a, c);
    }
    int sum=0;
    for(int i=1;i<=n;i++)
        for(int j=i+1;j<=n;j++)
        {
            dfs(i,j);
            sum = (sum % sp_num + we% sp_num)%sp_num;
            we=0;
            flag=1;
            memset(vis,0,sizeof vis);
        }
    cout<<sum;
//    int start=3;
//    for (int i = head[start]; i != -1; i = edge[i].next)
//        cout << start << "->" << edge[i].e << " " << edge[i].w << endl;
    return 0;
}


#include <bits/stdc++.h>
using namespace std;
const int MAXN=100005;
int vis[MAXN];
vector<int> nums;

int gcd(int m, int n)
{
    return n == 0 ? m : gcd(n, m % n);
}


int main()
{
    int N,K,num;
    unordered_map<int,int> hash;
    cin>>N>>K;
    //set<int> q;
    for(int i=0;i<N;i++)
    {
        cin>>num;
        nums.push_back(num);
        vis[num]=1;
    }
    sort(nums.end(),nums.end());
    for(int i=1;i<nums.size();i++)
        hash[nums[i-1]]=nums[i];
    int si=nums[nums.size()-1];
    for(int i=2;i<=K;i++)
            for(int j=1;j<=si;j++)
                if(vis[j])
                {
                    int temp=gcd(hash[j],j);
                    vis[temp]=1;
                    hash[j]=temp;
                }
    int count=0;
    for(int j=1;j<=si;j++)
        if(vis[j]==1)   count++;
    cout<<count;
    return 0;
}